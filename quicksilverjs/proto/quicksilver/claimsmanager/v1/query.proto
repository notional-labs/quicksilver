syntax = "proto3";
package quicksilver.claimsmanager.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "quicksilver/claimsmanager/v1/claimsmanager.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/claimsmanager/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params returns the total set of participation rewards parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get =
        "/quicksilver/claimsmanager/v1/params";
  }
  rpc Claims(QueryClaimsRequest)
  returns (QueryClaimsResponse) {
option (google.api.http).get =
    "/quicksilver/claimsmanager/v1/claims/{chain_id}";
}

rpc LastEpochClaims(QueryClaimsRequest)
returns (QueryClaimsResponse) {
option (google.api.http).get =
  "/quicksilver/claimsmanager/v1/previous_epoch_claims/{chain_id}";
}

rpc UserClaims(QueryClaimsRequest)
returns (QueryClaimsResponse) {
option (google.api.http).get =
  "/quicksilver/claimsmanager/v1/user/{address}/claims/{chain_id}";
}

rpc UserLastEpochClaims(QueryClaimsRequest)
returns (QueryClaimsResponse) {
option (google.api.http).get =
"/quicksilver/claimsmanager/v1/user/{address}/previous_epoch_claims/{chain_id}";
}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryClaimsRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  string address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryClaimsResponse {
  repeated Claim claims = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
